rm(y,lrt,fit)
res2 <- edgerApply(DS=counts(set2),f=x,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt")
res.de2 <- edgerFilter(res2,FC=2, p_val=0.05)
dim(res.de2)
pData(set2)$W_1
topTags(lrt)
design <- model.matrix(~x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
design
design <- model.matrix(~0+x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
# crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)res.de
dim(res.de)
design
colnames(design)[1:2] <- c("Ctl","Trt")
crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
res <- as.data.frame(topTags(lrt, n=nrow(filtered), contrast=crt ))
lrt <- glmLRT(fit, contrast=crt)  #,coef=2   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
rm(list=ls())
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/DE.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/DE.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
scale(c(1,2,5,6,8,7))
class(scale(c(1,2,5,6,8,7)))
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
aa <- NULL
aa[[3]]
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
aa = c("a","b","c")
bb <- c("d","e","f")
any(bb %in% aa)
aa = list("NULL","aa","cc")
any(is.null(aa))
is.null(aa)
aa
sapply(aa, is.null)
aa = list(NULL,"aa","cc")
any(is.null(aa))
sapply(aa, is.null)
any(sapply(aa, is.null))
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
is.numeric(c("aa","bb"))
is.numeric(c("1","2.8"))
is.numeric(c(1,2.8))
as.character(c(1,2,3,4))
is.numeric(as.character(c(1,2,3,4)))
aa <- as.factor(c("a","b","c"))
aa
is.character(aa)
is.factor(aa)
mypalette<-brewer.pal(7,"Greens")
image(1:7,1,as.matrix(1:7),col=mypalette,xlab="Greens (sequential)",
ylab="",xaxt="n",yaxt="n",bty="n")
mypalette
brewer.pal(2,"Greens")
brewer.pal(45,"Greens")
aa <- brewer.pal(45,"Greens")
aa[12]
aa <- brewer.pal(45,"info2")
aa <- brewer.pal(45,"set1")
aa <- brewer.pal(45,"Set1")
aa
brewer.pal.info
name = "Set1"
brewer.pal.info[rownames(brewer.pal.info)==name,"maxcolors"]
ceiling(45/9)
ceiling(46/9)
div(10,4)
10 %% 4
makeColorBrewer <- function(n,name = "Set1"){
require(RColorBrewer)
max_n <- brewer.pal.info[rownames(brewer.pal.info)==name,"maxcolors"]
if (n <= max_n){
cols <- brewer.pal(n,name)
} else {
col1 <- brewer.pal(max_n,name)
cols <- rep(col1, floor(n/max_n))
cols <- c(cols, col1[1:n%%max_n])
}
}
aa <- makeColorBrewer(13)
aa
13%%9
makeColorBrewer <- function(n,name = "Set1"){
require(RColorBrewer)
max_n <- brewer.pal.info[rownames(brewer.pal.info)==name,"maxcolors"]
if (n <= max_n){
cols <- brewer.pal(n,name)
} else {
col1 <- brewer.pal(max_n,name)
cols <- rep(col1, floor(n/max_n))
cols <- c(cols, col1[1:(n%%max_n)])
}
return(cols)
}
aa <- makeColorBrewer(13)
aa
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
rm(list = ls())
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
yeast_de_link <- "C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/Test data/yeast_de.csv"
de_df <- read.csv(yeast_de_link)
fg <- as.character(de_df[,1])
orgDb = org.Sc.sgd.db
keyType = "ENSEMBL"
all_genes <- keys(orgDb, keytype = keyType)
temp <- goPrep(fg=fg,bg=NULL,keyType,orgDb)
length(temp[[1]])
length(temp[[2]])
length(all_genes)
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
length(bg_mapped)
length(fg_mapped)
head(bg_mapped)
bg_mapped[1:4]
bg_mapped[1]
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
duplicated(fg_mapped)
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
any(fg_mapped %in% bg_mapped)
fg_mapped[1] %in% bg_mapped
head(fg_mapped)
head(bg_mapped)
tail(fg_mapped)
tail(bg_mapped)
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=org.Sc.db,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
org.Sc.db
org.Sc.sgd.db
if(keyType != "SGD"){
bg_mapped <- mapIds(orgDb,bg_mapped,"SGD",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"SGD",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "SGD"){
bg_mapped <- mapIds(orgDb,bg_mapped,"SGD",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"SGD",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=org.Sc.db,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
df <- summary(hgOver)
head(df)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
head(orgDb)
head(keys(orgDb))
head(keys(orgDb,keytype = "SGD"))
head(keys(org.Sc.sgdENTREZID))
head(keys(org.Sc.sgdENSEMBL))
head(keys(org.Sc.sgdSGD))
head(keys(org.Sc.sgd.DB))
head(keys(org.Sc.sgd.db))
head(keys(org.Sc.sgdENTREZID))
head(keys(orgDb,keytype = "ENTREZ"))
head(keys(orgDb,keytype = "ENTREZID"))
head(keys(org.Sc.sgdENTREZID))
head(keys(org.Sc.sgdSGD))
org.Sc.sgd()
head(org.Sc.sgdENTREZID)
org.Sc.sgdENTREZID
head(keys(org.Sc.sgdENTREZID))
head(keys(org.Hs.egGENENAME))
head(keys(org.Hs.egENTREZID))
org.Hs.eg()
head(keys(org.Hs.egENSEMBL))
head(keys(org.Hs.eg.db))
head(keys(org.Hs.eg.db,keytype = "ENSEMBL"))
head(keys(org.Hs.eg.db,keytype = "GENENAME"))
org.Hs.egENSEMBL
Lkeys(org.Sc.sgdSGD)
head(Lkeys(org.Sc.sgdSGD))
head(Rkeys(org.Sc.sgdSGD))
head(Rkeys(org.Sc.sgdENTREZID))
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
temp <- goPrep(fg=fg,bg=NULL,keyType,orgDb)
gostats <- gostatsApply(fg_mapped=temp[[1]],bg_mapped=temp[[2]],keyType,orgDb,ont="BP",pvalueCutoff=0.01)
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation=org.Sc.sgdENTREZID,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation=org.Sc.sgdENTREZID,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
df <- summary(hgOver)
head(keys(org.Hs.eg.db))
head(keys(org.Hs.egENTREZID))
head(Rkeys(org.Hs.egENSEMBL))
org.Hs.eg_dbschema()
head(keys(org.Sc.sgd.db, keytype = "ORF"))
head(keys(org.Sc.sgd.db, keytype = "ENSEMBL"))
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
head(keys(org.Sc.sgd.db))
head(fg_mapped)
if(keyType != "ORF"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ORF",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ORF",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
keyType
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ORF"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ORF",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ORF",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
head(bg_mapped)
head(fg_mapped)
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
df <- summary(hgOver)
head(df)
keytypes(org.Hs.eg.db)
keytypes(org.At.tair.db)
head(keys(org.Pf.plasmo.db))
head(keys(org.Pf.plasmo.db,keytype = "ENTREZID"))
keytypes(org.Pf.plasmo.db)
head(keys(org.Pf.plasmo.db,keytype = "ENTREZID"))
head(keys(org.EcK12.eg.db,keytype = "ENTREZID"))
hu.ensl <- head(keys(org.Hs.eg.db,keytype = "ENSEMBL"))
mapIds(org.Hs.eg.db,hu.ensl,"ENTREZID","ENSEMBL")
orgDb == org.Ce.eg.db
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(statmod)
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
as.data.frame(NULL)
summary(NULL)
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
yeast_de_link <- "C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/Test data/yeast_de.csv"
de_df <- read.csv(yeast_de_link)
fg <- as.character(de_df[,1])
orgDb = org.Sc.sgd.db
keyType = "ENSEMBL"
all_genes <- keys(orgDb, keytype = keyType)
ks <-  keytypes(orgDb)
for(kk in ks){
cat("ks is ",kk,"\n")
print(head(keys(orgDb, keytype = kk)))
}
temp <- goPrep(fg=fg,bg=NULL,keyType,orgDb)
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ORF"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ORF",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ORF",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
head(as.data.frame(hgOver))
head(summary(hgOver))
head(summary(NULL))
aa <- summary(NULL)
dim(aa)
is.data.frame(aa)
is.null(aa)
aa
bb <- as.data.frame(aa)
bb <- as.data.frame(NULL)
bb
is.null(bb)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("debrowser")
library(debrowser)
startDEBrowser()
library(devtools)
install_github("PF2-pasteur-fr/SARTools", build_vignettes=TRUE)
vignette("SARTools")
vignette("SARTools")
library(SARTools)
vignette("SARTools")
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp(ABioTrans)
runApp(ABioTrans.R)
getwd()
setwd("C:/Users/BUITT/Dropbox/Biotrans/ABioTrans")
runApp(ABioTrans.R)
runApp("ABioTrans.R")
runApp('ABioTrans.R')
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
wd
wd == getwd()
runApp("ABioTrans.R")
! wd == getwd()
runApp("ABioTrans.R")
wd
runApp("ABioTrans.R")
library(shiny); runApp('ABioTrans.R')
runApp('ABioTrans.R')
runApp('ABioTrans.R')
runApp('ABioTrans.R')
